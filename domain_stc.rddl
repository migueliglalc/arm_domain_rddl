﻿//////////////////////////////////////////////////////////////
//
// TAMP Continuous Finite bi-dimensional Domain fo IPC 2023
//
//
// Task And Motion Planning Problem, where real data has been included to define the specific coordinates of the cans on the shelfs, which now is finite and bidimensioanal
// Developed by Yuqian Yang, Yoonchang Sung and Fernando Fernandez, Miguel Iglesias
///////////////////////////////////////////////////////////////


domain can_storage {

  requirements {
    cpf-deterministic,
    reward-deterministic,
    constrained-state
  };

  types {
    shelf : object;
    can : object;
     };

  pvariables {

    MIN_X                     : { non-fluent, real, default = 0 };
    MIN_Y                     : { non-fluent, real, default = 0 };
    MAX_X                     : { non-fluent, real, default = 10 };
    MAX_Y                     : { non-fluent, real, default = 10 };
    SIZE_X_a                  : { non-fluent, real, default = 1 };
    SIZE_X_c(can)             : { non-fluent, real, default = 1 };
    SIZE_Y_c(can)             : { non-fluent, real, default = 1 };
    EPSILON                   : { non-fluent, real, default = 1 };
    SAFE_POSITION_Y           : { non-fluent, real, default = -5.0 };

    on-shelf(can,shelf)       : { state-fluent, bool, default = false };
    holding(can)              : { state-fluent, bool, default = false }; 
    working-shelf(shelf)      : { state-fluent, bool, default = false };  
    x_position_a              : { state-fluent, real, default = 0 };
    y_position_a              : { state-fluent, real, default = 0 }; //assume is the left most coordinate
    x_position_c(can)         : { state-fluent, real, default = 0 };
    y_position_c(can)         : { state-fluent, real, default = 0 };

    // Intermediate fluents
    safe-position                      : { interm-fluent, bool};
    arm-free                           : { interm-fluent, bool};
    break_x(can, shelf)                : { interm-fluent, bool};  // returns whether can avoids extension of arm in shelf of the given real size
    break_y(can, shelf)                : { interm-fluent, bool};  // returns whether can avoids a left or right shift of the arm in shelf
    break_extension(can, can, shelf)   : { interm-fluent, bool};  // returns whether can avoids the arm going from safe to working position
    put-down-conditions(can,shelf)     : { interm-fluent, bool};
    pick-up-conditions(can, shelf)     : { interm-fluent, bool};
    effective_move_x                   : { interm-fluent, real};
    effective_move_y                   : { interm-fluent, real};


    // Actions
    move_x                      : { action-fluent, real, default = 0 }; //
    move_y                      : { action-fluent, real, default = 0 };
    retract-off-shelf           : { action-fluent, bool, default = false };
    extend-to-shelf             : { action-fluent, bool, default = false };
    pick-up(can)                : { action-fluent, bool, default = false };
    put-down(can)               : { action-fluent, bool, default = false };
    change-shelf(shelf,shelf)   : { action-fluent, bool, default = false };

  };

  cpfs {

    break_x(?c, ?s) = if (working-shelf(?s) ^ ( (on-shelf(?c, ?s)^~(pick-up-conditions(?c,?s)^pick-up(?c))) | (holding(?c)^put-down(?c))) ) then
		    if ((
		      (
			(
			  (x_position_c(?c) >= x_position_a + SIZE_X_a) ^ (x_position_a + SIZE_X_a + move_x > x_position_c(?c))
			) |
			(
			  (x_position_c(?c) + SIZE_X_c(?c) <= x_position_a) ^ (x_position_a + move_x < x_position_c(?c) + SIZE_X_c(?c))
			)
		      ) ^
		      (y_position_a + effective_move_y> y_position_c(?c))
		    ) |
		    (
		      [exists_{?c1:can} (
			(holding(?c1) | (pick-up-conditions(?c1,?s)^pick-up(?c1))) ^
			(
			  (
			    (x_position_c(?c) >= x_position_c(?c1) + SIZE_X_c(?c1)) ^ (x_position_c(?c1) + SIZE_X_c(?c1) + move_x > x_position_c(?c))
			  ) |
			  (
			    (x_position_c(?c) + SIZE_X_c(?c) <= x_position_c(?c1)) ^ (x_position_c(?c1) + move_x < (x_position_c(?c) + SIZE_X_c(?c)))
			  )
			) ^
			(
			  (
			    (y_position_c(?c1)  + SIZE_Y_c(?c1) + effective_move_y>= y_position_c(?c)) ^
			    (y_position_c(?c1)  + SIZE_Y_c(?c1) + effective_move_y<= (y_position_c(?c) + SIZE_Y_c(?c)))
			  ) |
			  (
			    (y_position_c(?c1)  + effective_move_y<= (y_position_c(?c) + SIZE_Y_c(?c))) ^
			    (y_position_c(?c1)  + effective_move_y>= y_position_c(?c))
			  )
			)
		      )]
		    ))
		  then true
		  else false
		else false;
                    


    break_y(?c, ?s) = if (working-shelf(?s) ^ ( (on-shelf(?c, ?s)^~(pick-up-conditions(?c,?s)^pick-up(?c))) | (holding(?c)^put-down(?c))) ) then
                    if(
                      (
                        (y_position_c(?c) >= y_position_a ^ (y_position_a + move_y) > y_position_c(?c)) ^ // check y
                        (
                          (
                            ((x_position_a + SIZE_X_a + effective_move_x) >= x_position_c(?c)) ^
                            ((x_position_a + SIZE_X_a + effective_move_x) <= (x_position_c(?c) + SIZE_X_c(?c)))
                          ) |
                          (
                            (x_position_a  + effective_move_x>= x_position_c(?c)) ^
                            (x_position_a  + effective_move_x<= (x_position_c(?c) + SIZE_X_c(?c)))
                          )
                        ) // check x
                      ) | // if the arm breaks-extension
                      (
                        exists_{?c1:can}(
                          (holding(?c1) | (pick-up-conditions(?c1,?s)^pick-up(?c1))) ^
                          (
                            (
                              (y_position_c(?c) >= (y_position_c(?c1) + SIZE_Y_c(?c1))) ^
                              ((y_position_c(?c1) + SIZE_Y_c(?c1) + move_y) >= y_position_c(?c))
                              |
                              (y_position_c(?c) + SIZE_Y_c(?c)<= y_position_c(?c1)) ^
                              ((y_position_c(?c1) + move_y) <= (y_position_c(?c) + SIZE_Y_c(?c)))
                            ) ^ // check y
                            (
                              (
                                ((x_position_c(?c1) + SIZE_X_c(?c1)+ effective_move_x) >= x_position_c(?c)) ^
                                ((x_position_c(?c1) + SIZE_X_c(?c1)+ effective_move_x) <= (x_position_c(?c) + SIZE_X_c(?c)))
                              ) |
                              (
                                (x_position_c(?c1) + effective_move_x>= x_position_c(?c)) ^
                                (x_position_c(?c1) + effective_move_x<= (x_position_c(?c) + SIZE_X_c(?c)))
                              )
                            ) // check x
                          )
                        )
                      )
                    ) then true
                    else false
                  else false;
                              
    break_extension(?c, ?c1, ?s) = 
    				if (on-shelf(?c,?s) ) then
    			      		if (
    			      		   ( y_position_c(?c) < SIZE_Y_c(?c1))^
    			      		   
    			      		   ( 
		                                  (
		                                    ( (x_position_c(?c1) + SIZE_X_c(?c1) + effective_move_x ) >= x_position_c(?c))^
		                                    ( (x_position_c(?c1) + SIZE_X_c(?c1) + effective_move_x ) <= (x_position_c(?c) + SIZE_X_c(?c)) )
		                                  )
		                                  |
		                                  (
		                                    ( x_position_c(?c1) + effective_move_x >= x_position_c(?c))^
		                                    ( x_position_c(?c1) + effective_move_x <= (x_position_c(?c) + SIZE_X_c(?c)) )
		                                  )
                                            )
                                        ) then true
                                        else false
                                     else false;
                                        


    put-down-conditions(?c,?s) = (holding(?c) ^ working-shelf(?s) ^~safe-position);


    pick-up-conditions(?c, ?s) = if (arm-free ^ working-shelf(?s) ^ on-shelf(?c, ?s)) then
					if ((
					    ((x_position_a <= x_position_c(?c)) ^ ((x_position_a + SIZE_X_a) >= x_position_c(?c))) |
					    ((x_position_a >= x_position_c(?c)) ^ (x_position_a <= (x_position_c(?c) + SIZE_X_c(?c))))
					) ^
					    (
						((y_position_c(?c) - y_position_a) <= EPSILON ^ (y_position_c(?c) - y_position_a) >= 0) ^
						(~[exists_{?c1:can} (
						    ?c~=?c1 ^
						    (
							((y_position_c(?c1) + SIZE_Y_c(?c1)) <= y_position_c(?c)) ^
							((y_position_c(?c1) + SIZE_Y_c(?c1)) >= (y_position_a))
						    ) ^
						    (
							(x_position_c(?c1) >= x_position_c(?c)) ^ (x_position_c(?c1) <= x_position_c(?c) + SIZE_X_c(?c)) |
							(x_position_c(?c1) <= x_position_c(?c)) ^ (x_position_c(?c1) + SIZE_X_c(?c1) >= x_position_c(?c))
						    )
						)])
					    )) then true
					else false
				    else false;


    holding'(?c) = 
	    if ([exists_{?s:shelf}(pick-up-conditions(?c, ?s) ^ pick-up(?c))] ^
		[~exists_{?c1:can, ?s:shelf}(?c1 ~= ?c ^ pick-up-conditions(?c1, ?s) ^ pick-up(?c1))])
		then Bernoulli(max[min[1.0 - (y_position_c(?c)-y_position_a),1],0] )
	    else if ([exists_{?s:shelf}(put-down-conditions(?c, ?s) ^ put-down(?c))])
		then false
	    else holding(?c);




    arm-free = [~exists_{?c:can}(holding(?c))];

    safe-position = y_position_a==SAFE_POSITION_Y;

    working-shelf'(?s2) = 
	    if (safe-position ^ [exists_{?s1: shelf} (
		    working-shelf(?s1) ^ change-shelf(?s1, ?s2) ^
		    [~exists_{?s3:shelf}(change-shelf(?s1, ?s3) ^ ?s3 ~= ?s1 ^ ?s3 ~= ?s2)]
		)]) then true 
	    else if (safe-position ^ [exists_{?s1: shelf} (
		    working-shelf(?s2) ^ change-shelf(?s2, ?s1) ^
		    [~exists_{?s3:shelf}(change-shelf(?s2, ?s3) ^ ?s3 ~= ?s2 ^ ?s3 ~= ?s1)]
		)]) then false
	    else working-shelf(?s2);



                        
    on-shelf'(?c, ?s) = if (put-down-conditions(?c,?s)^put-down(?c))
                          then true
                        else if (pick-up-conditions(?c,?s)^pick-up(?c))
                          then false
                        else on-shelf(?c, ?s);
                        
    effective_move_x = if (
		    	(x_position_a + move_x < MIN_X) |
			(x_position_a + SIZE_X_a + move_x > MAX_X) |
			[exists_{?c:can}(
			    (
			    holding(?c)) ^
			    ((x_position_c(?c) + move_x < MIN_X) |
			     (x_position_c(?c) + SIZE_X_c(?c) + move_x > MAX_X))
			)]) then 0.0
			else Normal((x_position_a + move_x), MAX_X/100.0);
			
    effective_move_y = if (~safe-position ^
		     [~exists_{?s:shelf, ?c:can}(break_y(?c, ?s))] ^ 
		     (y_position_a + move_y >= 0) ^ 
		     (y_position_a + move_y <= MAX_Y) ^
		     [~exists_{?c:can}(
		     ( 
		     holding(?c)) ^ (y_position_a + SIZE_Y_c(?c) + move_y >= MAX_Y))]) then Normal((y_position_a + move_y), MAX_Y/100.0)
		     else 0.0;

    x_position_a' = 
	    if (
	    	(x_position_a + move_x < MIN_X) |
		(x_position_a + SIZE_X_a + move_x > MAX_X) |
		[exists_{?c:can}(
		    (holding'(?c) | 
		    holding(?c)) ^
		    ((x_position_c(?c) + move_x < MIN_X) |
		     (x_position_c(?c) + SIZE_X_c(?c) + move_x > MAX_X))
		)] |
		[exists_{?c:can, ?s:shelf}(break_x(?c, ?s))]
	    ) then x_position_a
	    else x_position_a + effective_move_x;

                 

    y_position_a' = 
	    if (retract-off-shelf ^ ~safe-position ^ 
		[~exists_{?s:shelf, ?c:can}(break_y(?c, ?s))]) then SAFE_POSITION_Y
	    else if (extend-to-shelf ^ safe-position ^ 
		     [~exists_{?c:can, ?c1:can, ?s:shelf}(?c ~= ?c1 ^ holding(?c1) ^ (working-shelf(?s) | working-shelf'(?s)) ^ break_extension(?c, ?c1, ?s))]) then 0.0
	    else if (~safe-position ^
		     [~exists_{?s:shelf, ?c:can}(break_y(?c, ?s))] ^ 
		     (y_position_a + move_y > 0) ^ 
		     (y_position_a + move_y < MAX_Y) ^
		     [~exists_{?c:can}(
		     (holding'(?c) | 
		     holding(?c)) ^ (y_position_a + SIZE_Y_c(?c) + move_y > MAX_Y))]) then y_position_a + effective_move_y
	    else y_position_a;



    x_position_c'(?c) = if(holding'(?c) ^ x_position_a ~= x_position_a') then x_position_c(?c) + move_x else x_position_c(?c);
    y_position_c'(?c) = if(holding'(?c)) then y_position_a' else y_position_c(?c);
    };

  reward = [exists_{?s:shelf}([forall_{?c:can}(on-shelf'(?c,?s))])];


  termination{
      [exists_{?s:shelf}([forall_{?c:can}(on-shelf(?c,?s))])];
  };
  
    
}
